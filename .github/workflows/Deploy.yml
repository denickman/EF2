
name: Deploy

# Controls when the action will run. Triggers the workflow on push events
# but only for the master branch
on:
  push:
    branches: # [ main ]
     - feature/image-feed/cache-feed-use-case

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: List of current directories
      run: |
        ls -la

    - name: Install provisioning profiles
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/prodprofile.mobileprovision .github/deployment/prodprofile.mobileprovision.gpg
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp .github/deployment/prodprofile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        # gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/devprofile.mobileprovision .github/deployment/devprofile.mobileprovision.gpg
        # cp .github/deployment/devprofile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Install keychain prod certificate
      run: |
        # Дешифруем и импортируем prod сертификат
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/dev_certificate.p12 .github/deployment/dev_certificate.p12.gpg
        security create-keychain -p "" build.keychain
        security import .github/deployment/dev_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A

        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/prod_certificate.p12 .github/deployment/prod_certificate.p12.gpg
        security import .github/deployment/prod_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A

        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain


    - name: Debug Provisioning Profile and Keychain
      run: |
        security find-identity -p codesigning -v
        ls ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_16.0.app

    - name: Xcode version
      run: /usr/bin/xcodebuild -version

    # - name: List of info.plist
    #   run: |
    #     cat EssentialApp/EssentialApp/Info.plist

    # - name: Set build number
    #   run: |
    #     buildNumber=$(($GITHUB_RUN_NUMBER + 1))
    #     /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "EssentialApp/EssentialApp/Info.plist"

    - name: Increment Build Number and Set CFBundleVersion
      run: |
        echo "Current run number: $GITHUB_RUN_NUMBER"
        buildNumber=$((GITHUB_RUN_NUMBER + 10))
        echo "New build number: $buildNumber"
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "EssentialApp/EssentialApp/Info.plist"
        echo "Current NUMBER:"
        /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "EssentialApp/EssentialApp/Info.plist"


  # - name: Increment Build Number
  #   run: |
  #     # Проверяем, существует ли файл build_version.txt
  #     if [ ! -f build_version.txt ]; then
  #       echo "1" > build_version.txt  # Если нет, создаем с начальным значением 1
  #     fi
  #     buildNumber=$(cat build_version.txt)
  #     buildNumber=$((buildNumber + 1))
  #     echo "New build number: $buildNumber"
  #     echo $buildNumber > build_version.txt
  #     /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "EssentialApp/EssentialApp/Info.plist"

    # - name: Set build number
      # run: /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $GITHUB_RUN_NUMBER" "EssentialApp/EssentialApp/Info.plist"

    - name: List of Directories
      run: |
        pwd
        ls -la

    - name: Build
      run: |
        xcodebuild clean archive \
        -sdk iphoneos \
        -workspace EssentialApp.xcworkspace \
        -configuration "Release" \
        -scheme "EssentialApp" \
        -derivedDataPath "DerivedData" \
        -archivePath "DerivedData/Archive/EssentialApp.xcarchive" \

    - name: Test check existing profile
      run: ls ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Export
      run: xcodebuild -exportArchive -archivePath DerivedData/Archive/EssentialApp.xcarchive -exportOptionsPlist .github/deployment/ExportOptions.plist -exportPath DerivedData/ipa

    - name: Deploy
      run: xcrun altool --upload-app --type ios --file "DerivedData/ipa/EssentialApp.ipa" --username "${{ secrets.APPSTORE_USERNAME }}" --password "${{ secrets.APPSTORE_PASSWORD }}" --verbose

# gpg --output dev_certificate.p12.gpg --symmetric --cipher-algo AES256 development.p12
# gpg --output prod_certificate.p12.gpg --symmetric --cipher-algo AES256 distribution.p12


# gpg --output devprofile.mobileprovision.gpg --symmetric --cipher-algo AES256 devProfile.mobileprovision
# gpg --output prodprofile.mobileprovision.gpg --symmetric --cipher-algo AES256 prodProfile.mobileprovision


# pcji-hchb-pixa-azan
